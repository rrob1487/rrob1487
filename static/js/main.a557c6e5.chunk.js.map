{"version":3,"sources":["Components/Skills.js","Components/Projects.js","Components/BasicCard.js","Components/Hobbies.js","Components/Experience.js","Components/Home.js","Components/ProjectPage.js","Components/Accomplishments.js","Components/Application.js","App.js","registerServiceWorker.js","index.js"],"names":["Skills","Component","constructor","props","super","createTableItem","bind","this","language","tools","width","scope","render","fluid","className","style","height","size","center","animation","ProjectObjects","ProjectName","ProjectDescription","Tools","Lessons","DateFinished","Pictures","Link","Projects","scrollPos","scrollPosition","componentDidMount","window","scrollTo","map","proj","index","title","description","date","more","BasicCard","md","picture","src","alt","to","concat","onClick","setScroll","pageYOffset","Hobbies","Experience","createCardBodyComponent","getColor","color","paddingLeft","paddingRight","desc","Accordion","Toggle","as","Button","variant","eventKey","Collapse","Home","sm","marginTop","ProjectPage","state","updateState","match","params","forEach","setState","_isMounted","componentWillUnmount","console","log","history","goBack","Carousel","controls","pic","Item","project_picture","z-depth-3","process","target","rel","href","fab","icon","Accomplishments","Application","collapse","update","name","dark","expand","isOpen","navbar","left","right","exact","path","component","App","Date","getFullYear","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a557c6e5.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport {MDBContainer, MDBCol, MDBJumbotron, MDBRow} from \"mdbreact\"\nimport ReactWOW from \"react-wow\"\n\nclass Skills extends Component {\n    constructor(props) {\n        super(props)\n        Skills.createTableItem = Skills.createTableItem.bind(this)\n    }\n\n    static createTableItem(language, tools, width) {\n        return (\n            <tr>\n                <th scope=\"row\"><strong>{language}</strong></th>\n                <td>{tools}</td>\n            </tr>\n        )\n    }\n\n    render() {\n        return (\n            <MDBContainer fluid className=\"elegant-color-dark\">\n                {/*Header*/}\n                <MDBRow style={{height: \"15vh\"}}>\n                    <MDBCol>\n                        <MDBContainer className=\"flex-center\">\n                            <h1 className=\"text-light \">Skills</h1>\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"9\"/>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"11\">\n                        {/*Table*/}\n                        <ReactWOW animation=\"fadeInLeft\">\n                            <MDBJumbotron className=\"elegant-color z-depth-5\">\n                                <MDBContainer fluid>\n                                    <h3 className=\"text-light\">Programming Languages</h3>\n                                    <br/>\n                                    <table\n                                        className=\"table table-striped table-hover table-bordered table-dark z-depth-5\">\n                                        <thead className=\"thead-dark\">\n                                        <tr>\n                                            <th style={{width: \"10%\"}} scope=\"col\"><strong>Language</strong></th>\n                                            <th style={{width: \"60%\"}} scope=\"col\">Libraries, Frameworks, And Tools Used\n                                            </th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {Skills.createTableItem(\"Java\", \"Spring, Spark, JUint, Android\", 95, 1)}\n                                        {Skills.createTableItem(\"C++\", \"Qt\", 80, 2)}\n                                        {Skills.createTableItem(\"C\", \"N/A\", 60, 3)}\n                                        {Skills.createTableItem(\"Python\", \"Numpy, Pandas, PyTorch\", 90, 4)}\n                                        {Skills.createTableItem(\"SQL\", \"Microsoft SQL Server, MySQL, Mongoose\", 75, 5)}\n                                        {Skills.createTableItem(\"HTML\", \"N/A\", 90, 6)}\n                                        {Skills.createTableItem(\"CSS\", \"Bootstrap, Material Design\", 55, 7)}\n                                        {Skills.createTableItem(\"JS/JSX\", \"React, Express, Node\", 85, 8)}\n                                        {Skills.createTableItem(\"PHP\", \"N/A\", 80, 9)}\n                                        {Skills.createTableItem(\"Solidity\", \"MetaMask, Rinkeby\", 65, 10)}\n                                        {Skills.createTableItem(\"Arduino\", \"N/A\", 80, 11)}\n                                        {Skills.createTableItem(\"Dart\", \"Flutter\", 25, 12)}\n                                        {Skills.createTableItem(\"Bash\", \"N/A\", 75, 13)}\n                                        </tbody>\n                                    </table>\n                                </MDBContainer>\n                            </MDBJumbotron>\n                        </ReactWOW>\n                        {/*Bonus Info*/}\n                        <ReactWOW animation=\"slideInUp\">\n                            <MDBJumbotron className=\"elegant-color z-depth-5\">\n                                <h4 className=\"text-light\"><strong>Other Tools And Concepts I'm Familiar With:</strong>\n                                </h4>\n                                <ul className=\"tools text-light\">\n                                    <MDBRow>\n                                        <MDBCol size=\"6\">\n                                            <li>Scrum</li>\n                                            <li>Maven</li>\n                                            <li>Package Management Tools</li>\n                                            <li>Agile Development</li>\n                                            <li>Black Box Testing</li>\n                                            <li>Test Driven Development</li>\n                                            <li>Machine Learning</li>\n                                            <li>Basic Penetration Testing</li>\n                                            <li>Basic Cryptography</li>\n                                            <li>JSON</li>\n                                            <li>Fuzzing</li>\n                                            <li>BurpSuite</li>\n                                            <li>Kali</li>\n                                            <li>Nessus</li>\n                                            <li>Snort</li>\n                                        </MDBCol>\n                                        <MDBCol size=\"6\">\n                                            <li>Universal Modeling Language</li>\n                                            <li>LucidChart</li>\n                                            <li>Socket Layer Networking</li>\n                                            <li>RESTful Web Services</li>\n                                            <li>Full Stack Development</li>\n                                            <li>Git</li>\n                                            <li>Hyperledger</li>\n                                            <li>BlockChain</li>\n                                            <li>Microsoft Office</li>\n                                            <li>Google Cloud Platform</li>\n                                            <li>Docker</li>\n                                            <li>pfSense</li>\n                                            <li>WireShark</li>\n                                            <li>SQLMap</li>\n                                            <li>Metasploit</li>\n                                        </MDBCol>\n                                    </MDBRow>\n                                </ul>\n                            </MDBJumbotron>\n                        </ReactWOW>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>)\n    }\n}\n\nexport default Skills","import React, {Component} from \"react\"\nimport {MDBContainer, MDBCol, MDBRow} from \"mdbreact\"\nimport BasicCard from \"./BasicCard\"\n\nexport const ProjectObjects = [\n    {\n        ProjectName: \"Advanced Networking And Security Capstone\",\n        ProjectDescription: \"For my Advanced Networking and Security class, I was required to use VMWare to manage and harden a virtual network. The network contained four Linux boxes and a Windows box. Grading was based on our ability to secure the system against the professor’s automated attacks and our peers' directed attacks.\",\n        Tools: \"A plethora of tools was used to complete this course. I now understand why systems admins have such a hard time managing their network bloat. The Windows server hosted a Microsoft SQL server, FTP server, and legacy NET web app. Alongside the Windows server was a Ubuntu server, which hosted a MySQL server and Apache Webserver. I also set up a virtual PfSense machine as the gateway and a SELK machine as the IDS and log analysis tool. The last box I managed was a Kali box used for penetration testing. I used tons of Kali tools including SQLMap, NMAP, HashCat, and BurpSuite. Getting hands-on experience using these professional tools was inspiring.\",\n        Lessons: \"This capstone provided many insights for me, and I am thankful that I was able to take such a well-designed course. Not only did I learn how to protect and attack networks, but I also learned that I have a passion for doing so. \",\n        DateFinished: \"Dec 2019\",\n        Pictures: [\"security.jpg\"]\n    },\n    {\n        ProjectName: 'Roller Ball',\n        ProjectDescription: \"This was the capstone project for my Object-Oriented Programing course. My team of 5 was tasked with creating a functioning Roller Ball Game. We worked in a scrum environment and in 3 sprints we were able to create and host a functioning RESTful application. Roller Ball is a circular chess variant, played on a 7x7 board. More information can be found here: http://history.chess.free.fr/rollerball.htm\",\n        Tools: \"A Java Spark API and a React Front end were used to complete this project. A database was considered for persistent storage, but after meeting with the product owner (PO), it was decided that serialization of information in a text file was the best solution, because the scale was small and the project objective was more focused on our object-oriented approach to the solution.\",\n        Lessons: \"All of the team members had experience with the tools that were used, so I would say that we didn’t gain a large amount of new technical skills from this project.  Instead, this project acted as a testament to our time at CSU. As a team, we were able to take vague instructions from our PO and create a functional web app with in-depth documentation. All the while following, Agile and Object-Oriented guidelines. The project did provide us with experience working in a team environment and skills that will be useful in a business setting.  One improvement I would make, is that I would spend a little bit more time on the design of the user interface. While the application functions perfectly, improvements in color coordination and visibility could be made.\",\n        DateFinished: \"Dec 2019\",\n        Link: \"https://github.com/hamjared/cs414-f19-001-Blueberries\",\n        Pictures: [\"rollerball.png\"]\n    },\n    {\n        ProjectName: 'Arbitrage Analyzer',\n        ProjectDescription: \"This was the capstone project for my Block Chain course. My team worked together to create a python script that repeatedly calls the public API of three different Crypto Currency Exchange Sites. The program then normalizes the data and calculates opportunities for triangular arbitrage, specifically where the starting and ending currencies are stable coins.\",\n        Tools: \"Shapeshift, Binance, and Coinbase APIs were used to collect data. After the data were normalized and stored, a secondary python script ran statistical analysis. \",\n        Lessons: \"This project was successful in finding arbitrage opportunities; however, we did not include mining or exchange fees in our calculations as both were dependent on factors that could not be calculated without an actual investment. My main role in this project involved researching arbitrage principles and educating the rest of the team on arbitrage principles’ function.  Our  knowledge of arbitrage at the start was limited, so it was my responsibility to meet with experts in finance and determine what types of algorithms and information we would need to make the project successful. After educating the others, I worked with them to create an object-oriented design that was both functional and efficient. \\n If I were to do the project again, I would focus on scale. Instead of doing the project in Python, I think it would be best to do it in C++ with focus on parallel calculations using the CUDA API. This would allow for much more efficient and complex calculations and would be the best option for a Real Time Attack Trading Bot handling actual funds.\",\n        DateFinished: \"May 2019\",\n        Link: \"https://github.com/silkylaroux/BlockChainProject\",\n        Pictures: [\"arbitrage.png\", \"shapeshift.jpeg\", \"binance.jpeg\", \"coinbase.png\"]\n    },\n    {\n        ProjectName: 'Jukebox',\n        ProjectDescription: \"This was a semester long group project for my CIS 320 Project Management course. Because the project proposal that I submitted was chosen, I was given the Project Manager role.  As Project Manager, scope and cost were my responsibilities. The goal of this project was to create a LAN jukebox that allows anyone to visit a website and add songs to a FIFO queue. The device would then use a python script to download the songs and play them in the order they were added to the queue on a common speaker.\",\n        Tools: \"A Spring Boot webserver was used with a React front end on a Raspberry Pi. The front end used the Spotify Search API to help users find songs and the back end parsed the URL of the song request and used an external library to download the file needed. The Raspberry Pi was set up with a static IP and could be attached to a set of speakers with either Bluetooth, Aux, or even HDMI, if you wanted to play music from a TV/Monitor. \",\n        Lessons: \"This project went very smoothly. At the start, my team understood all the different challenges that we would have to conquer, so we were prepared to quickly solve many of the issues as they arose. This was not my first time using React, so I had experience with it and provided most of the support on that part of the project.  The lack of learning curve ensured that the set up was quickly accomplished.  The most challenging task was getting the user verification for Spotify set up properly.\",\n        DateFinished: \"Nov 2018\",\n        Pictures: [\"juke1.png\", \"juke2.png\"],\n        Link: \"https://github.com/rrob1487/Smart-Jukebox\",\n    },\n    {\n        ProjectName: 'Alarm Clock',\n        ProjectDescription: \"I completed this project for my Introduction to Operating Systems class. The alarm clock was a Raspberry Pi with a touchscreen and custom GUI. The interface allowed the alarm clock to show the current time, set an alarm, and turn off the screen so that the light from the display did not keep me awake. It also had a microphone and a speaker, and it ran the open source Google Assistant library in the background\",\n        Tools: \"The user interface was a Java application that I created using the native JSwing library. The touchscreen came with its own software which was used because of the ease of set up. To use the Google Assistant library, I set up a Google Cloud Account and configured the proper authentication tokens. Overall, getting everything to work independently presented very few challenges.\",\n        Lessons: \"Like many things in life, this project was great in theory, but not functional in practice. The software for the touchscreen and the Google Assistant required different versions of Raspbian and as a result, the libraries were incompatible, and I was forced to demonstrate the project in two different parts, hot swapping micro SD cards to show the different pieces. This issue could have been addressed by using a different touchscreen, or by using a HDMI enabled screen and some additional hardware buttons, but due to time constraints, I wasn’t able to procure the additional hardware necessary. This project was a great lesson in the importance of interoperability and system testing, and if I were to do it again, I would verify library compatibility beforehand. \",\n        DateFinished: \"Dec 2017\",\n        Link: \"https://github.com/rrob1487/Alarm-Clock\"\n    },\n    {\n        ProjectName: 'IoT Drapes',\n        ProjectDescription: \"After the success with my MIDI board project (described below), I attempted another project using a micro controller device. This project was a window covering that could be controlled from my phone/laptop. The end design included interfacing the window covering with an alarm clock so that the blackout curtains would retract when the alarm sounded, and the sun would shine in when it was time to get up. \",\n        Tools: \"For this project I used a Wi-Fi enabled micro controller, a 6V continuous rotation servo motor, a long dowel as the “curtain rod”, and several yards of blackout fabric. The fabric was wrapped around and attached to the dowel which was mounted above the window on custom made mounting hardware which allowed the entire system to rotate freely.  One end of the dowel was attached to the servo motor. As the servo would spin, the fabric would wrap around the dowel, allowing more or less light through the window, depending on whether the fabric was going up or down. I was able to find a GitHub library that had Arduino code to host a web server that functioned properly on my hardware, and from there I just added the code to parse the server requests, and move the motor accordingly.\",\n        Lessons: \"This project presented the most learning opportunities, including basic household DIY tips, sewing tips and networking protocols.  The weight of the window covering presented challenges in keeping it on the wall; a better mounting system would be critical in a redesign.  Initially, to get the window covering functioning, I parsed the URL of HTTP GET requests and I did not design a GUI or user interface.  To remotely control the window covering movement I had to submit requests to the IP (which was not static) followed by a number between 0 and 100, which corresponded to the percent of window to cover. For example, if I wanted to put the shades all the way down, I would type 10.10.10.24/100 into my browser and it would start spinning.  This was problematic, mostly because of a lack of input sanitation.   This “buggy” system led to the window covering randomly activating, often, in the middle of the night. Overall, the window covering did function, and could be deployed remotely.  However, the physical design, coupled with the unsophisticated electronic interface, led to less than optimal operation.  If I were to design this project now, a total redesign of the hardware and software would result, but the main takeaways from this project are that a basic understanding of networking is crucial for any IoT devices and prototypes of the hardware would shed light on physical limitations prior to launching.\",\n        DateFinished: \"Aug 2017\",\n        Link: \"https://github.com/rrob1487/IoT-Drapes\",\n    },\n    {\n        ProjectName: 'Blackjack',\n        ProjectDescription: \"This blackjack application holds a special place in my heart because it is the first program I wrote on my own. Before I ever took a course in programming, I learned to write code by watching YouTube tutorials. A few lessons into the series, I learned how to use conditionals, and I got excited because it was the first logic I had ever seen outside of Minecraft. The excitement inspired me to write my own command line blackjack game. It was all written in main, the variable names were impossible to understand, and there were many, many, nested conditionals. But I was able to get it to function, and I am super proud of that. As I started taking college courses and becoming a better programmer, I rewrote the game a few different times, each time incorporating new knowledge garnered from my classes. The final iteration of the game was made after I learned about the 4 Object-Oriented Programming Principals. This time, it featured a full GUI and the ability to play online using a peer to peer connection. \",\n        Tools: \"Every iteration of the blackjack game was written in Java. The final version used JSwing for the GUI, and socket layer networking for the peer to peer connection. \",\n        Lessons: \"Since I redid this project many times, there were many different skills I applied and refined, but the most important skill I learned from this project was multithreading. When I was writing my final iteration, the GUI had issues when it needed to refresh. As a result of that issue, and with research and through consultation with experts,  I was able to finish the project by moving the GUI into its own thread. I credit a lot of my successes as a programmer to my blackjack games, as they allowed me to challenge myself outside of class, and helped me to put a lot of my newly learned skills to the test. I will probably never do another blackjack game, but if I do, I will do the bulk of the work in solidity, and focus on writing efficient smart contracts so that I can decentralize it and do payments with real cryptocurrency.  \",\n        DateFinished: \"Nov 2016\",\n        Pictures: [\"blackjack1.png\", \"blackjack2.png\", \"blackjack3.png\", \"blackjack4.png\", \"blackjack5.png\",],\n        Link: \"https://github.com/rrob1487/Blackjack\",\n    },\n    {\n        ProjectName: 'MIDI Board',\n        ProjectDescription: \"I built this project the summer after my first year of college. It was my first project written in a language other than Java, and it was my first attempt at using any type of microcontroller. For this project, I created a 16-button MIDI keyboard, capable of communicating with Ableton and other MIDI enabled software. The purpose of the keyboard is to act as a drum rack so that users can play sounds and loops at the press of a button. \",\n        Tools: \"Arcade buttons were used for the inputs, wood for the base, and plastic as the shell, which I molded and shaped using heat. For development I used the Arduino IDE and an Arduino Uno board. A Hairless-MIDISerial software was used as a bridge to test the code before using Atmel Flip to flash the board and make it a fully functional MIDI device.\",\n        Lessons: \"There were multiple challenges associated with this project including software debugging and base/shell design issues.  The primary lessons learned from this project were how to problem solve and improvise. This project challenged my dedication but my ability to fight through the adversity and setbacks and complete my goals is something that I am proud of even today. If I were to do this project again, I would modify hardware and perhaps choose different components. Based on my experience, I would use an Arduino Mega so that I have open pins for lights and potentiometers. I would also choose more lightweight and flexible design materials for the shell and base. And lastly, I wouldn’t use solid-core wire, as it is brittle and prone to breaking.\",\n        DateFinished: \"Aug 2016\",\n        Pictures: [\"midi1.jpeg\", 'midi2.jpg'],\n        Link: \"https://github.com/rrob1487/MIDI-Board\",\n    },]\n\nexport class Projects extends Component {\n    static scrollPosition = 0;\n\n    static setScroll(scrollPos){\n        Projects.scrollPosition = scrollPos;\n    }\n\n    componentDidMount() {\n        window.scrollTo(0,Projects.scrollPosition);\n    }\n\n    render() {\n        return (\n            <MDBContainer fluid className=\"elegant-color-dark\">\n                {/*Header*/}\n                <MDBRow style={{height: \"15vh\"}}>\n                    <MDBCol>\n                        <MDBContainer className=\"flex-center\">\n                            <h1 className=\"text-light \">My Projects</h1>\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"9\"/>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"11\">\n                        {\n                            ProjectObjects.map((proj, index) => (\n                                <BasicCard className=\"z-depth-5\"\n                                           index={index}\n                                           title={proj.ProjectName}\n                                           description={proj.ProjectDescription}\n                                           date={proj.DateFinished}\n                                           more={true}\n                                />\n                            ))}\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>)\n    }\n}\n\n","import React, {Component} from \"react\"\nimport {\n    MDBCol,\n    MDBJumbotron,\n    MDBRow\n} from \"mdbreact\"\nimport ReactWOW from \"react-wow\"\nimport {Link} from \"react-router-dom\"\nimport {Projects} from \"./Projects\"\n\nclass BasicCard extends Component {\n    render() {\n        return (\n            <ReactWOW animation=\"fadeInLeft\">\n                <MDBRow center>\n                    <MDBCol md='8'>\n                        <MDBJumbotron className=\"elegant-color z-depth-5\">\n                            <MDBRow center>\n                                <MDBCol md=\"8\">\n                                    <h2 className=\"text-light\">{this.props.title}</h2>\n                                    {this.props.date ? <h6 className=\"text-light\">Date Finished: {this.props.date}</h6> : <div/>}\n                                    {this.props.picture ?\n                                        <img src={this.props.picture} alt={this.props.title} className=\"img-fluid z-depth-3\"/> : <div />\n                                    }\n\n                                    <br/><br/>\n                                    <p className=\"text-light\">\n                                        {this.props.description}\n                                    </p>\n\n                                    <br/>\n                                    {this.props.more ? <Link to={\"/Projects/\".concat(this.props.title)} onClick={()=>Projects.setScroll(window.pageYOffset)}>read more</Link> : <div/>}\n                                </MDBCol>\n                            </MDBRow>\n                        </MDBJumbotron>\n                    </MDBCol>\n                </MDBRow>\n            </ReactWOW>\n        )\n    }\n}\n\n\nexport default BasicCard","import React, {Component} from \"react\"\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\"\nimport BasicCard from \"./BasicCard\"\n\nclass Hobbies extends Component {\n    render() {\n        return (\n            <MDBContainer fluid className=\"elegant-color-dark\">\n                {/*Header*/}\n                <MDBRow style={{height: \"15vh\"}}>\n                    <MDBCol>\n                        <MDBContainer className=\"flex-center\">\n                            <h1 className=\"text-light\">Hobbies</h1>\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"9\"/>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"11\">\n                        <BasicCard className=\"z-depth-5\"\n                                   index={1}\n                                   title=\"Hackathons\"\n                                   picture={process.env.PUBLIC_URL + '/pictures/vrhack.jpg'}\n                                   description=\"I participated in my first hackathon in spring 2017 and I've been hooked since. I've competed in all kinds of hackathons including the Fort Collins Start Up Weekend Hackathon, and The CSU VR Hackathon. Something about the fast-paced development environment and diversity of skills keep me coming back.\"\n                        />\n                        <BasicCard className=\"z-depth-5\"\n                                   index={2}\n                                   title=\"Exploring New Technology\"\n                                   picture={process.env.PUBLIC_URL + '/pictures/eth.jpg'}\n                                   description=\"I've always been an early adopter of technology. I had the first Android, I showed my friends fidget spinners before they were popular, and my Soundcloud likes are full of artists that most people have never heard of. I get a thrill out of discovering and learning new things, and technical solutions are no exception. AI and Blockchain were some of my favorite classes in college.  I can't wait to see what new tech the future holds.\"\n                        />\n                        <BasicCard className=\"z-depth-5\"\n                                   index={3}\n                                   title=\"Gaming\"\n                                   picture={process.env.PUBLIC_URL + '/pictures/smash.jpg'}\n                                   description=\"Growing up I played a lot of videogames, and nowadays it's no different. Whether I'm competing in Super Smash Bros\n                            Melee Tournaments, or casually playing Minecraft, I prefer videogames to any other form of media.\"\n                        />\n                        <BasicCard className=\"z-depth-5\"\n                                   index={4}\n                                   title=\"Sports\"\n                                   picture={process.env.PUBLIC_URL + '/pictures/quidditch.jpg'}\n                                   description=\"Sports have always been a big part of my life and they have taught me many lessons through the years such as team work, compromise, and sportsmanship. I played football from third grade through my senior year of high school, and I ran track all four years of high school.  Because sports are such an important part of my life, I also joined the CSU Quidditch team.  For me, sports are a great way to stay healthy and make new friends.\"\n                        />\n                        <BasicCard className=\"z-depth-5\"\n                                   index={5}\n                                   title=\"Music\"\n                                   picture={process.env.PUBLIC_URL + '/pictures/FunkyCollage.jpg'}\n                                   description=\"To me, music is more than just a way to pass time, it's a way to bond with the people around me.\n                            From rocking out to Bon Jovi with my mom, to headbanging to Defunk with my friends, music has brought me closer to many of the people around me.\"\n                        />\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        )\n    }\n}\n\n\nexport default Hobbies","import React, {Component} from \"react\"\nimport {MDBCard, MDBCardBody, MDBCardHeader, MDBCol, MDBContainer, MDBJumbotron, MDBRow} from \"mdbreact\"\nimport {Accordion, Button} from 'react-bootstrap'\n\nclass Experience extends Component {\n    constructor(props) {\n        super(props)\n        Experience.createCardBodyComponent = Experience.createCardBodyComponent.bind(this)\n        Experience.getColor = Experience.getColor.bind(this)\n    }\n\n    static getColor(index) {\n        let color\n        if (index % 2 === 0) {\n            color = \"bootstrapDark-1 text-light\"\n        } else {\n            color = \"bootstrapDark-2 text-light\"\n        }\n        return color\n    }\n\n    static createCardBodyComponent(description, index) {\n        return (\n            <MDBCardBody className={Experience.getColor(index)}>\n                <ul style={{paddingLeft: \"8vh\", paddingRight: \"4vh\"}}>\n                    {description.map((desc) => <li>{desc}</li>)}\n                </ul>\n            </MDBCardBody>\n        )\n    }\n\n    render() {\n        return (\n            <MDBContainer fluid className=\"elegant-color-dark\">\n                {/*Header*/}\n                <MDBRow style={{height: \"15vh\"}}>\n                    <MDBCol>\n                        <MDBContainer className=\"flex-center\">\n                            <h1 className=\"text-light\">Experience</h1>\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"9\"/>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"11\">\n                        <MDBJumbotron className=\"elegant-color z-depth-5\">\n                            <Accordion className=\"z-depth-5\">\n                                <MDBCard>\n\n                                    {/*Regis*/}\n                                    <MDBCardHeader className=\"bootstrapDark-1 text-light\">\n                                        <Accordion.Toggle className=\"text-light\" as={Button} variant=\"link\"\n                                                          eventKey=\"0\">\n                                            The Regis Company - Modeling Intern (July 2019 - August 2019)\n                                        </Accordion.Toggle>\n                                    </MDBCardHeader>\n                                    <Accordion.Collapse eventKey=\"0\">\n                                        {Experience.createCardBodyComponent([\n                                            \"Analyzed, documented, and helped to refactor a backend system with little or no guidance\",\n                                            \"Worked efficiently and effectively within a fast-paced scrum environment\",\n                                            \"Demonstrated ability to drive for results, deal with ambiguity, prioritize work based on changing business dynamics, meet deadlines, and operate with personal and professional integrity\"\n                                        ], 0)}\n                                    </Accordion.Collapse>\n                                </MDBCard>\n\n                                {/*Smash*/}\n                                <MDBCard>\n                                    <MDBCardHeader className=\"bootstrapDark-2 text-light\">\n                                        <Accordion.Toggle className=\"text-light\" as={Button} variant=\"link\"\n                                                          eventKey=\"1\">\n                                            Smash Burger - Preparation/Cooking Staff (May 2018 - August 2018)\n                                        </Accordion.Toggle>\n                                    </MDBCardHeader>\n                                    <Accordion.Collapse eventKey=\"1\">\n                                        {Experience.createCardBodyComponent([\n                                            \"Demonstrated strong workflow management skills as shown by my ability to keep up with demand during peak hours\",\n                                            \"Exhibited excellent communication skills as evidenced by effective communication with a large, diverse group of people\",\n                                            \"Was actively responsive and able to understand the needs of others to ensure delivery of the desired results\"\n                                        ], 1)}\n                                    </Accordion.Collapse>\n                                </MDBCard>\n\n                                {/*Kings*/}\n                                <MDBCard>\n                                    <MDBCardHeader className=\"bootstrapDark-1 text-light\">\n                                        <Accordion.Toggle className=\"text-light\" as={Button} variant=\"link\"\n                                                          eventKey=\"2\">\n                                            King Soopers - Deli Clerk (July 2017 - September 2017)\n                                        </Accordion.Toggle>\n                                    </MDBCardHeader>\n                                    <Accordion.Collapse eventKey=\"2\">\n                                        {Experience.createCardBodyComponent([\n                                            \"Analyzed differing daily situations and responded by adjusting and reassigning tasks\",\n                                            \"Helped to resolve customer complaints in a professional and effective manor\",\n                                        ], 2)}\n                                    </Accordion.Collapse>\n                                </MDBCard>\n\n                                {/*Radio*/}\n                                <MDBCard>\n                                    <MDBCardHeader className=\"bootstrapDark-2 text-light\">\n                                        <Accordion.Toggle className=\"text-light\" as={Button} variant=\"link\"\n                                                          eventKey=\"3\">\n                                            Radio Shack - Sales Associate (June 2016 - August 2016)\n                                        </Accordion.Toggle>\n                                    </MDBCardHeader>\n                                    <Accordion.Collapse eventKey=\"3\">\n                                        {Experience.createCardBodyComponent([\n                                            \"Demonstrated reliability when given additional responsibility such as training new staff and opening the store\",\n                                            \"Displayed leadership skills and capabilities in both team and individual dynamics\"\n                                        ], 3)}\n                                    </Accordion.Collapse>\n                                </MDBCard>\n\n                                {/*JP*/}\n                                <MDBCard>\n                                    <MDBCardHeader className=\"bootstrapDark-1 text-light\">\n                                        <Accordion.Toggle className=\"text-light\" as={Button} variant=\"link\"\n                                                          eventKey=\"4\">\n                                            JP Total Landscaping - Crew Assistant (May 2015 - August 2015)\n                                        </Accordion.Toggle>\n                                    </MDBCardHeader>\n                                    <Accordion.Collapse eventKey=\"4\">\n                                        {Experience.createCardBodyComponent([\n                                            \"Learned and adapted quickly as shown through my ability to replicate procedures after just one instruction\",\n                                        ], 4)}\n                                    </Accordion.Collapse>\n                                </MDBCard>\n\n                                {/*Kittredge*/}\n                                <MDBCard>\n                                    <MDBCardHeader className=\"bootstrapDark-2 text-light\">\n                                        <Accordion.Toggle className=\"text-light\" as={Button} variant=\"link\"\n                                                          eventKey=\"5\">\n                                            Kittredge Animal Clinic - Kennel Technician (May 2014 - March 2015)\n                                        </Accordion.Toggle>\n                                    </MDBCardHeader>\n                                    <Accordion.Collapse eventKey=\"5\">\n                                        {Experience.createCardBodyComponent([\n                                            \"Assisted owner with varying specialized, technical, and physical responsibilities, even when those responsibilities were outside of the scope of the job\",\n                                        ], 5)}\n                                    </Accordion.Collapse>\n                                </MDBCard>\n                            </Accordion>\n                        </MDBJumbotron>\n                    </MDBCol>\n                </MDBRow>\n                <br/>\n                <br/>\n                <br/>\n            </MDBContainer>\n        )\n    }\n}\n\n\nexport default Experience","import React, {Component} from \"react\"\nimport {MDBCol, MDBContainer, MDBJumbotron, MDBRow} from \"mdbreact\"\n\nclass Home extends Component {\n    render() {\n        return (\n            <MDBContainer fluid className=\"elegant-color-dark\">\n                {/*Header*/}\n                <MDBRow style={{height: \"15vh\"}}>\n                    <MDBCol>\n                        <MDBContainer className=\"flex-center\">\n                            <h1 className=\"text-light\">About Me</h1>\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"9\"/>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"11\">\n                        <MDBRow center>\n                            <MDBCol md='8'>\n                                <MDBJumbotron className=\"elegant-color z-depth-5\">\n                                    <MDBRow center>\n                                        <MDBCol md=\"7\" sm=\"12\">\n                                            <p className=\"text-light indent-text\" >\n                                                Hi, my name is Robbie Weinel, my pronouns are he/him, and I'm a developer\n                                                and business professional from Colorado.\n                                                I graduated from Colorado State University in December 2019 with a\n                                                double major in computer science and business administration with a\n                                                concentration in computer information systems.\n                                                If I had to pick 5 words to describe myself, they would be competitor,\n                                                inventor, intreprenuer, autotelic, and team-player.\n                                                I am interested in job opportunities in security, research, system\n                                                administration, system architecture, and backend/full-stack development. I'm also\n                                                interested in any projects\n                                                related to machine learning, blockchain, robotics, or any job where I\n                                                can\n                                                help to make a positive impact on the environment. Please contact me\n                                                with any\n                                                job opportunities or questions, my contact information is on the page\n                                                header.\n\n                                            </p>\n                                        </MDBCol>\n                                        <MDBCol md=\"5\" sm=\"12\">\n                                            <img style= {{marginTop: \"8vh\"}} src={process.env.PUBLIC_URL + '/pictures/me.jpg'}\n                                                 alt={this.props.title}\n                                                 className=\"img-fluid z-depth-3\"/>\n                                            <br/><br/>\n                                        </MDBCol>\n                                    </MDBRow>\n                                </MDBJumbotron>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        )\n    }\n}\n\n\nexport default Home","import {MDBCol, MDBContainer, MDBIcon, MDBJumbotron, MDBRow} from \"mdbreact\"\nimport React, {Component} from \"react\"\nimport {ProjectObjects} from \"./Projects\"\nimport Carousel from \"react-bootstrap/Carousel\"\nimport {Link} from \"react-router-dom\"\n\nclass ProjectPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ProjectName: \"Project Doesn't Exist\",\n            Pictures: ['unavailable.png'],\n            ProjectDescription: \"bop\",\n            DateFinished: \"\",\n            Tools: \"\",\n            Lessons: \"\",\n            Link: null,\n        }\n        ProjectPage.updateState = ProjectPage.updateState.bind(this)\n    }\n\n    componentDidMount() {\n        const {ProjectName} = this.props.match.params\n        ProjectObjects.forEach((proj, index) => {\n            //if(proj.ProjectName === this.props.ProjectName){\n            if (proj.ProjectName === ProjectName) {\n                //console.log(proj.ProjectName)\n                this.setState(proj)\n            }\n        })\n        this._isMounted = true\n        //console.log(\"isMounted: \".concat(this._isMounted))\n\n        //Scroll Page To Top\n        window.scrollTo(0,0)\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        //console.log(\"isMounted: \".concat(this._isMounted))\n    }\n\n\n    static updateState(ProjectName) {\n        ProjectObjects.forEach((proj, index) => {\n            if (proj.ProjectName === ProjectName) {\n                console.log(proj.ProjectName)\n                console.log(\"isMounted: \".concat(this._isMounted))\n                if (this._isMounted) {\n                    this.setState(proj)\n                }\n            }\n        })\n    }\nrender() {\nreturn (\n    <div>\n        <MDBContainer fluid className=\"elegant-color-dark\">\n            <br/>\n            <Link to=\"\" onClick={()=>this.props.history.goBack()}>back to all projects</Link>\n            <MDBRow style={{height: \"15vh\"}}>\n                <MDBCol>\n                    <MDBContainer className=\"flex-center\">\n                        <h1 className=\"text-light \">{this.state.ProjectName}</h1>\n                    </MDBContainer>\n                </MDBCol>\n                <MDBCol size=\"9\"/>\n            </MDBRow>\n            <MDBRow center>\n                <MDBCol md='10'>\n                    <MDBJumbotron className=\"elegant-color z-depth-5\">\n                        <MDBRow center>\n                            <MDBCol md=\"4\">\n                                <h2 className=\"text-light\">Date Finished:</h2>\n                                <p className=\"text-light\">{this.state.DateFinished}</p>\n                                <br/>\n                                <h2 className=\"text-light\">Project Description:</h2>\n                                <p className=\"text-light\">{this.state.ProjectDescription}</p>\n                            </MDBCol>\n                            <MDBCol className=\"pictures\" md=\"6\">\n                                <Carousel controls={true}>\n                                    {this.state.Pictures.map((pic) => (\n                                        <Carousel.Item>\n                                            <img height={\"400vh\"} width={\"600vh\"} project_picture z-depth-3\n                                                 src={process.env.PUBLIC_URL.concat(\"/pictures/\", pic)}\n                                                alt={this.state.ProjectName}/>\n                                        </Carousel.Item>\n                                    ))}\n\n                                </Carousel>\n                            </MDBCol>\n                        </MDBRow>\n                        <br/>\n                        <MDBRow center>\n                            <MDBCol md=\"10\">\n                                <h2 className=\"text-light\">The following is a list of tools used during this project:</h2>\n                                <p className=\"text-light\">{this.state.Tools}</p>\n                            </MDBCol>\n                        </MDBRow>\n                        <br/>\n                        <MDBRow center>\n                            <MDBCol md=\"10\">\n                                <h2 className=\"text-light\">Lessons Learned:</h2>\n                                <p className=\"text-light\">{this.state.Lessons}</p>\n                            </MDBCol>\n                        </MDBRow>\n                        <br/>\n                        <MDBRow center>\n                            <MDBCol md=\"10\">\n                                <h2 className=\"text-light\">Link To Code:</h2>\n                                <p className=\"text-light\">{this.state.Link ? <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.state.Link}><MDBIcon fab icon=\"github\"/> - {this.state.Link}</a>: \"Link Unavailable\"}</p>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBJumbotron>\n                </MDBCol>\n            </MDBRow>\n            <Link to=\"\" onClick={()=>this.props.history.goBack()}>back to all projects</Link>\n            <br/>\n        </MDBContainer>\n    </div>\n)\n}\n}\n\nexport default ProjectPage","import React, {Component} from \"react\"\nimport {MDBCol, MDBContainer, MDBJumbotron, MDBRow} from \"mdbreact\"\n\nclass Accomplishments extends Component {\n    render() {\n        return (\n            <MDBContainer fluid className=\"elegant-color-dark\">\n                {/*Header*/}\n                <MDBRow style={{height: \"15vh\"}}>\n                    <MDBCol>\n                        <MDBContainer className=\"flex-center\">\n                            <h1 className=\"text-light\">Accomplishments</h1>\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"9\"/>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"11\">\n                        <MDBRow center>\n                            <MDBCol md='8'>\n                                <MDBJumbotron className=\"elegant-color z-depth-5\">\n\n                                </MDBJumbotron>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        )\n    }\n}\n\n\nexport default Accomplishments","import React, {Component} from \"react\"\nimport {\n    MDBCollapse,\n    MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle,\n    MDBIcon,\n    MDBNavbar,\n    MDBNavbarBrand,\n    MDBNavbarNav,\n    MDBNavbarToggler,\n    MDBNavItem,\n    MDBNavLink, MDBSideNavLink\n} from \"mdbreact\"\nimport {HashRouter as Router, Switch, Route,} from \"react-router-dom\"\nimport Skills from \"./Skills\"\nimport Hobbies from \"./Hobbies\"\nimport Experience from \"./Experience\"\nimport Home from \"./Home\"\nimport {Projects, ProjectObjects} from \"./Projects\"\nimport ProjectPage from \"./ProjectPage\"\nimport Accomplishments from \"./Accomplishments\";\n\nclass Application extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collapse: false,\n        }\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onClick() {\n        this.setState({\n            collapse: !this.state.collapse,\n        })\n    }\n\n    update(name) {\n        if (ProjectPage) {\n            ProjectPage.updateState(name);\n        }\n    }\n\n    render() {\n        return (\n            <Router>\n                <header>\n                    <MDBNavbar color=\"elegant-color\" dark expand=\"md\">\n                        <MDBNavbarBrand href=\"/\">\n                            <strong>Robbie Weinel</strong>\n                        </MDBNavbarBrand>\n                        <MDBNavbarToggler onClick={this.onClick}/>\n                        <MDBCollapse isOpen={this.state.collapse} navbar>\n                            <MDBNavbarNav left>\n                                <MDBNavItem>\n                                    <MDBNavLink to=\"/Projects\">Projects</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink to=\"/Exp\">Experience</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink to=\"/Skills\">Skills</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink to=\"/Hobbies\">Hobbies</MDBNavLink>\n                                </MDBNavItem>\n                                {/*<MDBNavItem>*/}\n                                {/*    <MDBNavLink to=\"/Accomplishments\">Accomplishments</MDBNavLink>*/}\n                                {/*</MDBNavItem>*/}\n                            </MDBNavbarNav>\n                            <MDBNavbarNav right>\n                                <MDBNavItem>\n                                    <h6 className=\"nav-link\">robbie.weinel@gmail.com</h6>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <a className=\"nav-link\" target=\"_blank\" rel=\"noopener noreferrer\"\n                                       href=\"https://github.com/rrob1487\"><MDBIcon fab icon=\"github\"/></a>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <a className=\"nav-link\" target=\"_blank\" rel=\"noopener noreferrer\"\n                                       href=\"https://www.linkedin.com/in/robbie-weinel-0013911a2/\"><MDBIcon fab\n                                                                                                            icon=\"linkedin\"/></a>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <a className=\"nav-link\" target=\"_blank\" rel=\"noopener noreferrer\"\n                                       href=\"https://www.instagram.com/robbie_weinel/\"><MDBIcon fab\n                                                                                                icon=\"instagram\"/></a>\n                                </MDBNavItem>\n                            </MDBNavbarNav>\n                        </MDBCollapse>\n                    </MDBNavbar>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Home/>\n                        </Route>\n                        <Route path=\"/Skills\">\n                            <Skills props={this.props}/>\n                        </Route>\n                        <Route path=\"/Hobbies\">\n                            <Hobbies/>\n                        </Route>\n                        <Route path=\"/Exp\">\n                            <Experience/>\n                        </Route>\n                        <Route path=\"/Accomplishments\">\n                            <Accomplishments/>\n                        </Route>\n                        <Route exact path=\"/Projects\">\n                            <Projects/>\n                        </Route>\n                        {<Route exact path=\"/Projects/:ProjectName\" component={ProjectPage}/>}\n\n                    </Switch>\n                </header>\n            </Router>)\n    }\n}\n\n\nexport default Application","import React, {Component} from \"react\";\nimport \"./index.css\";\nimport Application from \"./Components/Application\";\nimport {MDBContainer, MDBFooter} from \"mdbreact\"\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Application/>\n                <MDBFooter color=\"elegant-color\">\n                    <div className=\"footer-copyright text-center py-3\">\n                        <MDBContainer fluid>\n                            &copy; {new Date().getFullYear()} Copyright: Robbie Weinel\n                        </MDBContainer>\n                    </div>\n                </MDBFooter>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}